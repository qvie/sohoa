from flask import Flask, request, render_template, redirect, url_for, send_file
import os
import psycopg2
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import cv2
import uuid
import time
from datetime import datetime 
from paddleocr import PaddleOCR
import base64
from fpdf import FPDF
import hashlib
from Crypto.Util.Padding import unpad, pad
from Crypto.Cipher import AES
import random
import string
from flask import send_from_directory
app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
OUTPUT_FOLDER = 'static/output'
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# K·∫øt n·ªëi PostgreSQL
DATABASE_URL = "dbname='ocr_dbs' user='postgres' password='123456' host='localhost' port='5432'"
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

SECRET_KEY = "my_secret_key_123"  # üîê ƒê·ªïi th√†nh key an to√†n h∆°n
BLOCK_SIZE = 16  # AES block size

# Kh·ªüi t·∫°o PaddleOCR (ch·ªâ kh·ªüi t·∫°o 1 l·∫ßn)
ocr = PaddleOCR(lang="vi")

def get_key():
    """T·∫°o kh√≥a AES t·ª´ SECRET_KEY (d√πng SHA-256 ƒë·ªÉ t·∫°o key 32 bytes)."""
    return hashlib.sha256(SECRET_KEY.encode()).digest()

def encrypt_text(text):
    """M√£ h√≥a vƒÉn b·∫£n v·ªõi AES-256."""
    key = get_key()
    cipher = AES.new(key, AES.MODE_ECB)
    padded_data = pad(text.encode(), AES.block_size)
    encrypted = cipher.encrypt(padded_data)
    return base64.b64encode(encrypted).decode()

def decrypt_text(encrypted_text):
    """Gi·∫£i m√£ vƒÉn b·∫£n AES-256."""
    key = get_key()
    cipher = AES.new(key, AES.MODE_ECB)
    decrypted_padded = cipher.decrypt(base64.b64decode(encrypted_text))
    return unpad(decrypted_padded, AES.block_size).decode()

def preprocess_image(image_path):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh tr∆∞·ªõc khi ƒë∆∞a v√†o OCR"""
    image = cv2.imread(image_path)
    if image is None:
        return None
    
    # Chuy·ªÉn sang grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # C√¢n b·∫±ng histogram
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    enhanced = clahe.apply(gray)
    
    # Lo·∫°i b·ªè nhi·ªÖu
    denoised = cv2.fastNlMeansDenoising(enhanced, None, 10, 7, 21)
    
    return denoised

def generate_passcode():
    """T·∫°o passcode ng·∫´u nhi√™n 8 k√Ω t·ª±."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

def process_image(image_path):
    """Nh·∫≠n di·ªán vƒÉn b·∫£n t·ª´ h√¨nh ·∫£nh b·∫±ng PaddleOCR"""
    processed_image = preprocess_image(image_path)
    if processed_image is None:
        return "Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh", "", "", 0  # Tr·∫£ v·ªÅ 0% n·∫øu l·ªói

    # L∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω ƒë·ªÉ ƒë∆∞a v√†o OCR
    temp_processed_path = os.path.join(OUTPUT_FOLDER, "temp_processed.png")
    cv2.imwrite(temp_processed_path, processed_image)

    # Nh·∫≠n di·ªán vƒÉn b·∫£n v·ªõi PaddleOCR
    result = ocr.ocr(temp_processed_path, cls=True)
    
    extracted_text = ""
    confidence_scores = []
    
    for line in result:
        if line:
            for word_info in line:
                text, confidence = word_info[1]
                extracted_text += text + " "
                confidence_scores.append(confidence)

    # T√≠nh ƒë·ªô ch√≠nh x√°c trung b√¨nh
    average_confidence = np.mean(confidence_scores) if confidence_scores else 0
    
    # L∆∞u ·∫£nh k·∫øt qu·∫£
    unique_id = str(uuid.uuid4())[:8]
    timestamp = int(time.time())
    output_image_path = os.path.join(OUTPUT_FOLDER, f'ocr_result_{unique_id}_{timestamp}.png')

    return extracted_text.strip(), image_path, output_image_path, round(average_confidence * 100, 2)  # ƒê·ªïi sang %

def save_document(name, file_path, ocr_content, category="Uncategorized", uploaded_by=None):
    upload_datetime = datetime.now()
    uploaded_by = uploaded_by if uploaded_by else "Unknown"
    passcode = generate_passcode()  # T·∫°o passcode cho t√†i li·ªáu
    encrypted_content = encrypt_text(ocr_content)  # üîê M√£ h√≥a n·ªôi dung OCR

    cursor.execute("""
        INSERT INTO documents (name, file_path, ocr_content, category, uploaded_by, upload_date, passcode, indexed)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING id
    """, (name, file_path, encrypted_content, category, uploaded_by, upload_datetime, passcode, False))
    
    doc_id = cursor.fetchone()[0]
    conn.commit()
    return doc_id, passcode  # Tr·∫£ v·ªÅ c·∫£ ID v√† passcode

def text_to_image(text, output_path):
    font = ImageFont.truetype("arial.ttf", 36)  # Font ch·ªØ
    max_width = 800  # Chi·ªÅu r·ªông t·ªëi ƒëa c·ªßa ·∫£nh
    margin = 50  # L·ªÅ tr√°i, ph·∫£i

    # Chia vƒÉn b·∫£n th√†nh c√°c d√≤ng ph√π h·ª£p v·ªõi chi·ªÅu r·ªông ·∫£nh
    lines = []
    words = text.split()
    current_line = ""

    image = Image.new("RGB", (max_width, 400), color=(255, 255, 255))  # ·∫¢nh t·∫°m th·ªùi
    draw = ImageDraw.Draw(image)

    for word in words:
        test_line = current_line + " " + word if current_line else word
        test_size = draw.textbbox((0, 0), test_line, font=font)[2]  # L·∫•y chi·ªÅu r·ªông

        if test_size < max_width - 2 * margin:
            current_line = test_line
        else:
            lines.append(current_line)
            current_line = word

    lines.append(current_line)  # Th√™m d√≤ng cu·ªëi c√πng

    # T√≠nh to√°n chi·ªÅu cao c·∫ßn thi·∫øt cho ·∫£nh
    line_height = draw.textbbox((0, 0), "A", font=font)[3] - draw.textbbox((0, 0), "A", font=font)[1]  # Chi·ªÅu cao m·ªôt d√≤ng
    image_height = max(400, len(lines) * (line_height + 10) + 100)  # TƒÉng chi·ªÅu cao n·∫øu c·∫ßn

    # T·∫°o ·∫£nh m·ªõi v·ªõi chi·ªÅu cao ch√≠nh x√°c
    image = Image.new("RGB", (max_width, image_height), color=(255, 255, 255))
    draw = ImageDraw.Draw(image)

    # V·∫Ω t·ª´ng d√≤ng l√™n ·∫£nh
    y_position = 50
    for line in lines:
        draw.text((margin, y_position), line, font=font, fill=(0, 0, 0))
        y_position += line_height + 10

    image.save(output_path)

def save_metadata(document_id, metadata):
    for key, value in metadata.items():
        cursor.execute("""
            INSERT INTO metadata (document_id, key, value)
            VALUES (%s, %s, %s)
        """, (document_id, key, value))
    conn.commit()  # ‚úÖ Th√™m commit ƒë·ªÉ l∆∞u v√†o DB

def save_tags(document_id, tags):
    for tag in tags:
        cursor.execute("""
            INSERT INTO tags (document_id, tag)
            VALUES (%s, %s)
        """, (document_id, tag))
    conn.commit()  # ‚úÖ Th√™m commit ƒë·ªÉ l∆∞u v√†o DB

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'image' not in request.files:
        return redirect(url_for('index'))
    
    file = request.files['image']
    file_path = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(file_path)

    extracted_text, original_image_path, output_image_path, accuracy = process_image(file_path)

    category = request.form.get('category', 'Uncategorized')
    uploaded_by = request.form.get('uploaded_by', 'Unknown')

    doc_id = save_document(file.filename, file_path, extracted_text, category=category, uploaded_by=uploaded_by)

    return render_template('result.html', data={
        'content': extracted_text,
        'original_image': f'output/{os.path.basename(original_image_path)}',
        'ocr_image': f'output/{os.path.basename(output_image_path)}',
        'uploaded_by': uploaded_by,
        'accuracy': f"{accuracy:.2f}%" if accuracy is not None else "N/A"  # üëà Hi·ªÉn th·ªã accuracy n·∫øu c√≥
    })
    
@app.route('/text-to-image', methods=['POST'])
def generate_image():
    text = request.form.get('text')  # Nh·∫≠n n·ªôi dung vƒÉn b·∫£n t·ª´ form
    output_path = os.path.join(OUTPUT_FOLDER, 'text_image.png')  # ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫ßu ra
    text_to_image(text, output_path)  # G·ªçi h√†m ƒë·ªÉ chuy·ªÉn vƒÉn b·∫£n th√†nh ·∫£nh

    return send_file(output_path, as_attachment=True, download_name="generated_image.png")
@app.route('/download_image/<filename>', methods=['GET'])
def download_image(filename):
    return send_from_directory(OUTPUT_FOLDER, filename, as_attachment=True)

@app.route('/search', methods=['GET'])
def search_documents():
    query = request.args.get('q', '').strip()
    category = request.args.get('category', '').strip()
    uploaded_by = request.args.get('uploaded_by', '').strip()
    passcode = request.args.get('passcode', '').strip()
    start_date = request.args.get('start_date', '').strip()
    end_date = request.args.get('end_date', '').strip()

    print(f"üîç Debug: Query nh·∫≠p v√†o - {query}")
    print(f"üîç Debug: Danh m·ª•c - {category}, Ng∆∞·ªùi t·∫£i l√™n - {uploaded_by}, T·ª´ ng√†y - {start_date}, ƒê·∫øn ng√†y - {end_date}")

    sql = """
        SELECT id, name, category, ocr_content, uploaded_by, upload_datetime 
        FROM documents WHERE 1=1
    """
    params = []

    if passcode:
        sql += " AND passcode = %s"
        params.append(passcode)

    if query:
        sql += " AND (LOWER(ocr_content) LIKE %s OR LOWER(category) LIKE %s OR LOWER(name) LIKE %s)"
        params.extend(['%' + query.lower() + '%'] * 3)

    if category:
        sql += " AND LOWER(category) = %s"
        params.append(category.lower())

    if uploaded_by:
        sql += " AND LOWER(uploaded_by) = %s"
        params.append(uploaded_by.lower())

    if start_date and end_date:
        sql += " AND upload_datetime BETWEEN %s AND %s"
        params.extend([start_date, end_date])

    sql += " ORDER BY upload_datetime DESC"  # S·∫Øp x·∫øp theo ng√†y t·∫£i l√™n m·ªõi nh·∫•t

    with conn.cursor() as cursor:
        cursor.execute(sql, tuple(params))
        documents = cursor.fetchall()

    return render_template('search.html', documents=documents, query=query, passcode=passcode)

@app.route('/export-pdf', methods=['GET', 'POST'])
def export_pdf():
    if request.method == 'GET':
        return "Vui l√≤ng g·ª≠i y√™u c·∫ßu POST v·ªõi d·ªØ li·ªáu vƒÉn b·∫£n ƒë·ªÉ t·∫°o PDF."

    text = request.form.get('text', 'Kh√¥ng c√≥ d·ªØ li·ªáu')
    pdf_path = os.path.join(OUTPUT_FOLDER, "ocr_result.pdf")

    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Chia vƒÉn b·∫£n th√†nh nhi·ªÅu d√≤ng n·∫øu qu√° d√†i
    lines = text.split("\n")
    for line in lines:
        pdf.multi_cell(0, 10, txt=line, align='L')

    pdf.output(pdf_path)
    
    return send_file(pdf_path, as_attachment=True, download_name="ocr_result.pdf")
@app.route('/get_image/<path:filename>')
def get_image(filename):
    return send_from_directory('static/output', filename)

@app.route('/document/<int:doc_id>')
def view_document(doc_id):
    cursor.execute("SELECT name, file_path, ocr_content, category FROM documents WHERE id = %s", (doc_id,))
    doc = cursor.fetchone()

    if not doc:
        return "T√†i li·ªáu kh√¥ng t·ªìn t·∫°i!", 404

    decrypted_text = decrypt_text(doc[2])  # üîì Gi·∫£i m√£ n·ªôi dung OCR tr∆∞·ªõc khi hi·ªÉn th·ªã

    return render_template('document.html', document={
        'filename': doc[0],
        'file_path': doc[1].replace("static/", ""),
        'ocr_text': decrypted_text,  # üîì Hi·ªÉn th·ªã vƒÉn b·∫£n g·ªëc ƒë√£ gi·∫£i m√£
        'category': doc[3]
    })
if __name__ == '__main__':
    app.run(debug=True, port=5001)
